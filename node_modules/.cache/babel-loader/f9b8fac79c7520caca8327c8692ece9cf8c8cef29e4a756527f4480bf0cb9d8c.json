{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from \"axios\";\nimport qs from 'qs'; //转json数据工具包\nimport { ElMessage } from 'element-plus';\n\n//1.利用axios对象的方法create，去创建一个axios实例。\nconst requests = axios.create({\n  //配置对象\n  //接口当中：路径都带有/api     基础路径，发送请求的时候，路径当中会出现api\n  baseURL: \"http://192.168.50.36:8080/\",\n  //代表请求超时的时间\n  timeout: 5000\n});\n\n//接收请求拦截器\nrequests.interceptors.response.use(res => {\n  if (typeof res.data !== 'object') {\n    ElMessage.error('服务端异常！');\n    return Promise.reject(res);\n  }\n  if (res.data.code != 200) {\n    console.log(res.data);\n    if (res.data.msg) ElMessage.error(res.data.msg);\n    if (res.data.resultCode == 419) {\n      router.push({\n        path: '/login'\n      });\n    }\n    return Promise.reject(res.data);\n  }\n  return res.data; //返回的是数据\n});\n\nconst header = {\n  'Content-Type': 'application/json;charset=UTF-8',\n  'accessToken': ''\n};\nconst http = {\n  get(url = '', params = {}) {\n    return new Promise((resolve, reject) => {\n      requests({\n        url,\n        params,\n        headers: header,\n        method: 'GET'\n      }).then(res => {\n        resolve(res.data);\n        return res;\n      }).catch(err => {\n        reject(err);\n      });\n    });\n  },\n  post(url = '', params = {}) {\n    return new Promise((resolve, reject) => {\n      requests({\n        url,\n        data: qs.parse(params),\n        headers: header,\n        method: 'POST'\n      }).then(res => {\n        resolve(res.data);\n        return res.data;\n      }).catch(error => {\n        reject(error);\n      });\n    });\n  },\n  put(url = '', params = {}) {\n    return new Promise((resolve, reject) => {\n      requests({\n        url,\n        data: qs.parse(params),\n        headers: header,\n        method: 'PUT'\n      }).then(res => {\n        resolve(res.data);\n        return res.data;\n      }).catch(error => {\n        reject(error);\n      });\n    });\n  },\n  delete(url = '', params = {}) {\n    return new Promise((resolve, reject) => {\n      requests({\n        url,\n        data: qs.parse(params),\n        headers: header,\n        method: 'DELETE'\n      }).then(res => {\n        resolve(res.data);\n        return res.data;\n      }).catch(error => {\n        reject(error);\n      });\n    });\n  }\n};\n//对外暴露\nexport default http;","map":{"version":3,"names":["axios","qs","ElMessage","requests","create","baseURL","timeout","interceptors","response","use","res","data","error","Promise","reject","code","console","log","msg","resultCode","router","push","path","header","http","get","url","params","resolve","headers","method","then","catch","err","post","parse","put","delete"],"sources":["E:/app/college-application/src/api/request.js"],"sourcesContent":["import axios from \"axios\";\nimport qs from 'qs';//转json数据工具包\nimport { ElMessage } from 'element-plus'\n\n//1.利用axios对象的方法create，去创建一个axios实例。\nconst requests = axios.create({\n  //配置对象\n  //接口当中：路径都带有/api     基础路径，发送请求的时候，路径当中会出现api\n  baseURL: \"http://192.168.50.36:8080/\",\n  //代表请求超时的时间\n  timeout: 5000,\n});\n\n//接收请求拦截器\nrequests.interceptors.response.use(res => {\n  if (typeof res.data !== 'object') {\n    ElMessage.error('服务端异常！')\n    return Promise.reject(res)\n  }\n  if (res.data.code != 200) {\n    console.log(res.data);\n    if (res.data.msg) ElMessage.error(res.data.msg)\n    if (res.data.resultCode == 419) {\n      router.push({ path: '/login' })\n    }\n    return Promise.reject(res.data)\n  }\n  return res.data//返回的是数据\n})\n\nconst header={\n  'Content-Type': 'application/json;charset=UTF-8',\n  'accessToken': '',\n}\n\nconst http = {\n  get(url = '', params = {}) {\n    return new Promise((resolve, reject) => {\n      requests({\n        url,\n        params,\n        headers: header,\n        method: 'GET'\n      }).then(res => {\n        resolve(res.data)\n        return res\n      }).catch(err => {\n        reject(err)\n      })\n    })\n  },\n  post(url = '', params = {}) {\n    return new Promise((resolve, reject) => {\n      requests({\n        url,\n        data: qs.parse(params),\n        headers: header,\n        method: 'POST'\n      }).then(res => {\n        resolve(res.data)\n        return res.data\n      }).catch(error => {\n        reject(error)\n      })\n    })\n  },\n  put(url = '', params = {}) {\n    return new Promise((resolve, reject) => {\n      requests({\n        url,\n        data: qs.parse(params),\n        headers: header,\n        method: 'PUT'\n      }).then(res => {\n        resolve(res.data)\n        return res.data\n      }).catch(error => {\n        reject(error)\n      })\n    })\n  },\n  delete(url = '', params = {}) {\n    return new Promise((resolve, reject) => {\n      requests({\n        url,\n        data: qs.parse(params),\n        headers: header,\n        method: 'DELETE'\n      }).then(res => {\n        resolve(res.data)\n        return res.data\n      }).catch(error => {\n        reject(error)\n      })\n    })\n  }\n}\n//对外暴露\nexport default http;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}